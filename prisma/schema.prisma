// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  name                  String
  email                 String    @unique
  password              String
  phone                 String?
  phoneVerified         Boolean   @default(false)
  phoneVerificationCode String?
  phoneVerificationExpires DateTime?
  location              String?
  lastLogin             DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  appointments          Appointment[]
  reviews               Review[]
  role                  String    @default("user") // user, owner, admin
  fields                Field[]   @relation("FieldOwner")
  balance               Decimal   @default(0)
  matchRequests         MatchRequest[]
  joinRequests          JoinRequest[]
}

model Field {
  id            String    @id @default(cuid())
  name          String
  address       String
  city          String
  district      String
  phone         String
  email         String?
  price         Float
  size          String?   // Ã–rn: 30x50, 40x60
  description   String?
  images        Json      @default("[]")
  latitude      Float
  longitude     Float
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  appointments  Appointment[]
  reviews       Review[]
  features      Json      @default("[]")
  ownerId       String
  owner         User      @relation(fields: [ownerId], references: [id], name: "FieldOwner")
  matchRequests MatchRequest[]
}

model Appointment {
  id            String    @id @default(cuid())
  userId        String
  fieldId       String
  date          DateTime
  startTime     DateTime
  endTime       DateTime
  status        String    @default("pending") // pending, confirmed, cancelled
  depositPaid   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  field         Field     @relation(fields: [fieldId], references: [id])
}

model Review {
  id            String    @id @default(cuid())
  userId        String
  fieldId       String
  rating        Int
  comment       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id])
  field         Field     @relation(fields: [fieldId], references: [id])
}

model MatchRequest {
  id                String    @id @default(cuid())
  fieldId           String
  date              DateTime
  time              String    // HH:MM format
  teamSize          Int
  lookingForTeamSize Int
  level             String    // BEGINNER, INTERMEDIATE, ADVANCED
  feeSharing        String    // SPLIT, FULL, FREE
  description       String?
  status            String    @default("OPEN") // OPEN, MATCHED, CLOSED
  creatorId         String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  creator           User      @relation(fields: [creatorId], references: [id])
  field             Field     @relation(fields: [fieldId], references: [id])
  joinRequests      JoinRequest[]
}

model JoinRequest {
  id              String    @id @default(cuid())
  matchRequestId  String
  userId          String
  message         String?
  status          String    @default("PENDING") // PENDING, APPROVED, REJECTED
  rejectionReason String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  matchRequest    MatchRequest @relation(fields: [matchRequestId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id])
}
